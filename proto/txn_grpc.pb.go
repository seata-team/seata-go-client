// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/txn.proto

package seata_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_StartGlobal_FullMethodName   = "/seata.txn.v1.TransactionService/StartGlobal"
	TransactionService_Submit_FullMethodName        = "/seata.txn.v1.TransactionService/Submit"
	TransactionService_Abort_FullMethodName         = "/seata.txn.v1.TransactionService/Abort"
	TransactionService_AddBranch_FullMethodName     = "/seata.txn.v1.TransactionService/AddBranch"
	TransactionService_BranchTry_FullMethodName     = "/seata.txn.v1.TransactionService/BranchTry"
	TransactionService_BranchSucceed_FullMethodName = "/seata.txn.v1.TransactionService/BranchSucceed"
	TransactionService_BranchFail_FullMethodName    = "/seata.txn.v1.TransactionService/BranchFail"
	TransactionService_Get_FullMethodName           = "/seata.txn.v1.TransactionService/Get"
	TransactionService_List_FullMethodName          = "/seata.txn.v1.TransactionService/List"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	StartGlobal(ctx context.Context, in *StartGlobalRequest, opts ...grpc.CallOption) (*StartGlobalResponse, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error)
	AddBranch(ctx context.Context, in *AddBranchRequest, opts ...grpc.CallOption) (*AddBranchResponse, error)
	BranchTry(ctx context.Context, in *BranchTryRequest, opts ...grpc.CallOption) (*BranchTryResponse, error)
	BranchSucceed(ctx context.Context, in *BranchStateRequest, opts ...grpc.CallOption) (*BranchStateResponse, error)
	BranchFail(ctx context.Context, in *BranchStateRequest, opts ...grpc.CallOption) (*BranchStateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) StartGlobal(ctx context.Context, in *StartGlobalRequest, opts ...grpc.CallOption) (*StartGlobalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGlobalResponse)
	err := c.cc.Invoke(ctx, TransactionService_StartGlobal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, TransactionService_Submit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortResponse)
	err := c.cc.Invoke(ctx, TransactionService_Abort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) AddBranch(ctx context.Context, in *AddBranchRequest, opts ...grpc.CallOption) (*AddBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBranchResponse)
	err := c.cc.Invoke(ctx, TransactionService_AddBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BranchTry(ctx context.Context, in *BranchTryRequest, opts ...grpc.CallOption) (*BranchTryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BranchTryResponse)
	err := c.cc.Invoke(ctx, TransactionService_BranchTry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BranchSucceed(ctx context.Context, in *BranchStateRequest, opts ...grpc.CallOption) (*BranchStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BranchStateResponse)
	err := c.cc.Invoke(ctx, TransactionService_BranchSucceed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BranchFail(ctx context.Context, in *BranchStateRequest, opts ...grpc.CallOption) (*BranchStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BranchStateResponse)
	err := c.cc.Invoke(ctx, TransactionService_BranchFail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, TransactionService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, TransactionService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	StartGlobal(context.Context, *StartGlobalRequest) (*StartGlobalResponse, error)
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	Abort(context.Context, *AbortRequest) (*AbortResponse, error)
	AddBranch(context.Context, *AddBranchRequest) (*AddBranchResponse, error)
	BranchTry(context.Context, *BranchTryRequest) (*BranchTryResponse, error)
	BranchSucceed(context.Context, *BranchStateRequest) (*BranchStateResponse, error)
	BranchFail(context.Context, *BranchStateRequest) (*BranchStateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) StartGlobal(context.Context, *StartGlobalRequest) (*StartGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGlobal not implemented")
}
func (UnimplementedTransactionServiceServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedTransactionServiceServer) Abort(context.Context, *AbortRequest) (*AbortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedTransactionServiceServer) AddBranch(context.Context, *AddBranchRequest) (*AddBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBranch not implemented")
}
func (UnimplementedTransactionServiceServer) BranchTry(context.Context, *BranchTryRequest) (*BranchTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchTry not implemented")
}
func (UnimplementedTransactionServiceServer) BranchSucceed(context.Context, *BranchStateRequest) (*BranchStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchSucceed not implemented")
}
func (UnimplementedTransactionServiceServer) BranchFail(context.Context, *BranchStateRequest) (*BranchStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchFail not implemented")
}
func (UnimplementedTransactionServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransactionServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_StartGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).StartGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_StartGlobal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).StartGlobal(ctx, req.(*StartGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_Abort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_AddBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).AddBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_AddBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).AddBranch(ctx, req.(*AddBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BranchTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchTryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BranchTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_BranchTry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BranchTry(ctx, req.(*BranchTryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BranchSucceed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BranchSucceed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_BranchSucceed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BranchSucceed(ctx, req.(*BranchStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BranchFail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BranchFail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_BranchFail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BranchFail(ctx, req.(*BranchStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seata.txn.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGlobal",
			Handler:    _TransactionService_StartGlobal_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _TransactionService_Submit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _TransactionService_Abort_Handler,
		},
		{
			MethodName: "AddBranch",
			Handler:    _TransactionService_AddBranch_Handler,
		},
		{
			MethodName: "BranchTry",
			Handler:    _TransactionService_BranchTry_Handler,
		},
		{
			MethodName: "BranchSucceed",
			Handler:    _TransactionService_BranchSucceed_Handler,
		},
		{
			MethodName: "BranchFail",
			Handler:    _TransactionService_BranchFail_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransactionService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TransactionService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/txn.proto",
}
